
create table mydb.emp_info(
    id int,
    emp_tm datetime,
    name varchar(50),
    sex int
)
primary key (id,emp_tm)
partition by date_trunc('day',emp_tm)
distributed by hash(id) buckets 1
order by (id);


# 【properties】
# 从3.4开始，insert中可以设置properties，目前只有以下三个参数
INSERT INTO mydb.emp_info
PROPERTIES (
    "timeout"="2",
    "max_filter_ratio"="0.1",
    "strict_mode"="true"
)
VALUES
     (1001, '2020-05-10 09:00:00', '张三', 1),
     (1002, '2020-06-15 10:30:00', '李四', 1),
     (1003, '2020-07-22 08:45:00', '王芳', 0),
     (1004, '2020-08-03 14:15:00', '赵敏', 0),
     (1005, '2020-09-18 11:20:00', 'Michael', 1),
     (1006, '2020-10-25 13:10:00', 'Sarah', 0),
     (1007, '2020-11-30 16:40:00', '陈伟', 1),
     (1008, '2021-01-05 10:00:00', '林小玉', 0),
     (1009, '2021-02-14 09:30:00', 'Robert', 1),
     (1010, '2021-03-21 12:25:00', 'Emily', 0);


# 【部分列更新】
# 从sr3.3.1之后，insert也可以支持部分列更新。如果指定了insert的列，则只更新这些列，其他列不受影响。
# 注意：部分列更新只支持主键表，且写入时要提供所有主键的值。
# 更新前数据
# +----+-------------------+----+---+
# |id  |emp_tm             |name|sex|
# +----+-------------------+----+---+
# |1002|2020-06-15 10:30:00|李四  |1 |
# |1001|2020-05-10 09:00:00|张三  |1 |
# +----+-------------------+----+---+
select * from mydb.emp_info where id in (1001,1002);

# 通过指定要写入的字段，来实现部分列更新。
# 注意：
# 1.必须指定主键表的所有主键字段（在这里是id和emp_tm）
# 2.在要写入的数据中，可以给出数据表中已存在的数据(下例中是id为1001、1002的数据)，也可以给出不存在的数据(下例中是id为1020的数据)。针对已存在的数据会进行部分列更新，针对不存在的数据会进行写入。形成upsert的语义，使用insert既可以实现update，也可以实现insert。
insert into mydb.emp_info
(id,emp_tm,name)
  values
      (1001,'2020-05-10 09:00:00','hello'),
      (1002,'2020-06-15 10:30:00','world'),
      (1020,now(),'new data');

# 查询数据，发现：
# 1.针对已有的数据，只更新了指定的部分列，未指定的列不受影响
# 2.针对不存在的数据，数据会插入到表中，对于未指定的列(sex)，则给默认值null
# +----+-------------------+--------+----+
# |id  |emp_tm             |name    |sex |
# +----+-------------------+--------+----+
# |1020|2025-04-27 15:42:07|new data|null|
# |1001|2020-05-10 09:00:00|hello   |1   |
# |1002|2020-06-15 10:30:00|world   |1   |
# +----+-------------------+--------+----+
select * from mydb.emp_info where id in (1001,1002,1020);

# 【insert时指定label】
# 如果不指定label，则是由sr自动生成label，这样想知道一个insert语句的查询记录就比较难。
# 因此我们可以使用with label来指定label，这样可以使用show load来查询我们这个insert语句的执行情况。
INSERT INTO mydb.emp_info(id, emp_tm, name, sex) WITH LABEL `load_emp_1` VALUES (1021, '2023-05-01 08:30:00', '刘德华', 1),
                                                     (1022, '2023-05-02 09:15:00', '梁朝伟', 1),
                                                     (1023, '2023-05-03 10:20:00', '张曼玉', 0),
                                                     (1024, '2023-05-04 13:45:00', '周杰伦', 1),
                                                     (1025, '2023-05-05 14:30:00', '孙燕姿', 0),
                                                     (1026, '2023-05-08 09:00:00', '吴彦祖', 1),
                                                     (1027, '2023-05-09 10:10:00', '林志玲', 0),
                                                     (1028, '2023-05-10 11:25:00', '郭富城', 1),
                                                     (1029, '2023-05-11 14:15:00', '蔡依林', 0),
                                                     (1030, '2023-05-12 16:40:00', '古天乐', 1);

use mydb;
# 通过show load来查询指定label的记录

# |JobId|Label     |State   |Progress           |Type  |Priority|ScanRows|FilteredRows|UnselectedRows|SinkRows|EtlInfo|TaskInfo                                            |ErrorMsg|CreateTime         |EtlStartTime       |EtlFinishTime      |LoadStartTime      |LoadFinishTime     |TrackingSQL|JobDetails                                                                                                                                                                                                                                                       |Warehouse|

# |11362|load_emp_1|FINISHED|ETL:100%; LOAD:100%|INSERT|NORMAL  |0       |0           |0             |10      |null   |resource:N/A; timeout(s):14400; max_filter_ratio:0.0|null    |2025-04-27 15:53:17|2025-04-27 15:53:17|2025-04-27 15:53:17|2025-04-27 15:53:17|2025-04-27 15:53:20|           |{"All backends":{"ae63ee97-233c-11f0-b5c4-0242c0a85004":[10002]},"FileNumber":0,"FileSize":0,"InternalTableLoadBytes":322,"InternalTableLoadRows":10,"ScanBytes":0,"ScanRows":0,"TaskNumber":1,"Unfinished backends":{"ae63ee97-233c-11f0-b5c4-0242c0a85004":[]}}|         |

show load where label='load_emp_1'

